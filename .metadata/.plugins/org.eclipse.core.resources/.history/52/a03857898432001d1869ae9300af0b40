package com.in28minutes.unittesting.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.web.bind.annotation.GetMapping;

import com.in28minutes.unittesting.model.Item;
import com.in28minutes.unittesting.service.ItemBusinessService;

@RunWith(SpringRunner.class)// required only for junit 4 but not junit 5
@WebMvcTest(value = ItemController.class)
public class ItemControllerControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@MockBean
	private ItemBusinessService businessService;
	
	@Test
	public void dummyItem_Basic() throws Exception {
		RequestBuilder request = MockMvcRequestBuilders.get("/dummy-item").accept(MediaType.APPLICATION_JSON);
		MvcResult result = mockMvc.perform(request)
				.andExpect(status().isOk())
				//.andExpect(content().string("Hello World"))
				.andReturn();
		
		assertEquals("{\"id\":1,\"name\":\"Ball\",\"price\":10,\"quantity\":100}", result.getResponse().getContentAsString());
	}


	@Test
	public void itemBusinessService_Basic() throws Exception {
		when(businessService.retreiveHardCodedItem()).thenReturn(new Item(2, "Item2", 10, 120));
		RequestBuilder request = MockMvcRequestBuilders.get("/item-from-business-service")
				.accept(MediaType.APPLICATION_JSON);
		MvcResult result = mockMvc.perform(request)
				.andExpect(status().isOk())
				//.andExpect(content().string("Hello World"))
				.andReturn();
		
		assertEquals("{\"id\":2,\"name\":\"Item2\",\"price\":10,\"quantity\":120}", result.getResponse().getContentAsString());
	}

	@Test
	public void getAllItems_Basic() throws Exception {
		when(businessService.getAllItems()).thenReturn(
				Arrays.asList(new Item(2, "Item2", 10, 120),new Item(3, "Item3", 20, 220)));
		RequestBuilder request = MockMvcRequestBuilders.get("/all-items")
				.accept(MediaType.APPLICATION_JSON);
		MvcResult result = mockMvc.perform(request)
				.andExpect(status().isOk())
				.andExpect(content().json("[{id:2,name:Item2,price:10,quantity:120},{id:3,name:Item3,price:20,quantity:220}]"))
				.andReturn();
		
		//assertEquals("[{id:2,name:Item2,price:10,quantity:120}]", result.getResponse().getContentAsString());
	}

	
}
