package com.in28minutes.unittesting.business;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.atMost;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;

import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class ListMockTest {
	
	List<String> mockList = mock(List.class);

	@Test
	public void size_basic() {
		
		when(mockList.size()).thenReturn(5);
		assertEquals(5, mockList.size());
	}
	
	@Test
	public void returnDifferentValues() {
	
		when(mockList.size()).thenReturn(5).thenReturn(10);
		assertEquals(5, mockList.size());
		assertEquals(10, mockList.size());
	}
	
	@Test
	public void returnWithParameters() {
		when(mockList.get(0)).thenReturn("in28Min");
		assertEquals("in28Min", mockList.get(0));
		assertEquals(null, mockList.get(1));
	}
	
	@Test
	public void returnWithGenericParameters() {
		when(mockList.get(anyInt())).thenReturn("in28Min");
		assertEquals("in28Min", mockList.get(0));
		assertEquals("in28Min", mockList.get(1));
	}
	
	@Test
	public void verificationBasics() {
		
		//SUT
		String value1 = mockList.get(0);
		String value2 = mockList.get(1);
		// Verify
		verify(mockList).get(0);
		verify(mockList, times(2)).get(anyInt());
		verify(mockList, atLeast(1)).get(anyInt());
		verify(mockList, atMost(2)).get(anyInt());
		verify(mockList, never()).get(2);
	}
	
	@Test
	public void argumetCapturing() {
		//SUT
		mockList.add("SomeString");
		
		//verification
		ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
		verify(mockList).add(captor.capture());
		assertEquals("SomeString", captor.getValue());
	}
	
	@Test
	public void multipleArgumetCapturing() {
		//SUT
		mockList.add("SomeString1");
		mockList.add("SomeString2");
		
		//verification
		ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
		verify(mockList, times(2)).add(captor.capture());
		List<String> allValues = captor.getAllValues();
		assertEquals("SomeString1", allValues.get(0));
		assertEquals("SomeString2", allValues.get(1));
	}

}


